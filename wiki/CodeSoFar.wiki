#summary Current (but not necessarily working) copy of the code.
#labels Featured
=WORK IN PROGRESS=

The following code will change at my whim. May be updated regularly, may not. Comments/suggestions/modifications welcome - send along to woragrump@gmail.com.

{{{
@@ REQUIRED FEATURES - READ THIS FIRST!
@@ -
@@ You are going to need a Function Invocation Level of at least 10,000.
@@ -
@@ You are assumed to have an isstaff(dbref) function. The SGP Globals come with one.
@@ -
@@ GAME-SPECIFIC DIFFERENCES
@@ -
@@ This section is likely only interesting to coders, and maybe not even those. I apologize in advance for any system bias I am perceived to be displaying. Read on at your own risk.
@@ -
@@ itemize(<list>, <delim>) - equates to elist(<list>, <phrase>, <delim>) on Rhost. Rhost users may need to create a custom itemize function. There should be one included with the SGP Globals, however.
@@ iter() calls which are required to have no spaces have an output delimiter of @@ for MUX compatibility. Rhost users will need to change this to @@().
@@ -
@@ Since there's no ibreak() on MUX, I've used first(iter(blah, if(bleh, bloo|<term>|)), |<term>|). Waste of cycles, but easy to convert - just search for the first |<term>| and stick a [ibreak()] in its place, then remove the 'first(' and the ', |<term>|)'. Note that you will have to do this by hand (or at least look before hitting replace all) because first( is used elsewhere in the code. Or you could just leave it as is - not like nowadays we can't afford the extra cycles.
@@ -
@@ streq() has been replaced with not(comp(string1, string2)) for MUX compatibility.
@@ -
@@ Reverse strip (strip only characters NOT in the permitted list) has been replaced by not(comp(strip(input, list of valid characters),))
@@ -
@@ -
@@ -
@@ -
@@ -
@@ -

@create Stat DataBase <STDB>=10
@set STDB=HALT

@force me=&vS STDB=num(STDB)

&strict_characters STDB=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 !@$^`'",.?_

&regex_characters STDB=[v(strict_characters)]|*#()-+

&compare_characters STDB=[v(strict_characters)]|*#()<>=&-+

@create StatDB Functions <SDBF>=10
@set SDBF=HALT INHERIT
@parent SDBF=STDB

&fn-isstaff SDBF=isstaff(%0)

&fn-stdheader SDBF=%b.[center(< %0 >, 75, -)].

&fn-stdfooter SDBF=%b.[if(t(%0), center(< %0 >, 75, -), repeat(-, 75))].

&fn-threecolumns SDBF=iter(%0, ljust(mid(itext(0), 0, setr(0, if(eq(mod(inum(0), 3), 2), 24, 23))), %q0)[if(eq(mod(inum(0), 3), 0), %R %b, %b%b)], |, @@())

&fn-valid_characters SDBF=not(comp(strip(%0, u(%1_characters)),))

&fn-is_type SDBF=t(match(v(stat_types), %0*, |))

&fn-is_stat SDBF=t(match(iter(lattr(%vS/stat-*), extract(v(itext(0)), 2, 1, :),, :), %0, :))

&fn-find_stat SDBF=if(t(setr(0, match(iter(lattr(%vS/stat-*), extract(v(itext(0)), 2, 1, :),, :), %0, :))), extract(lattr(%vS/stat-*), %q0, 1))

&fn-is_stat_detail SDBF=t(match(extract(v(%0), 4, 9999, :), %1:%2:*, ~))

&fn-get_stat_name SDBF=extract(v(%0), 2, 1, :)

&fn-get_type_name SDBF=extract(v(stat_types), match(v(stat_types), %0*, |), 1, |)
th u(SDBF/fn-get_type_name, Attribute)


@create StatDB Commands <SDBC>=10
@set SDBC=INHERIT
@parent SDBC=SDBF

&cmd-+ref SDBC=$+ref:@pemit %#=u(fn-stdheader, Stat Reference)%R Available stat types:%R%R%b [ulocal(fn-threecolumns, v(stat_types))]%R%R Type +ref Stat Type or Stat Name for more.%R[u(fn-stdfooter)];





@create StatDB Staff Commands <STSC>=10
@set STSC=INHERIT
@parent STSC=SDBF
@lock/use STSC=fn-isstaff/1

&cmd-+newtype STSC=$+newtype *:@switch setr(E, if(not(u(fn-valid_characters, %0, strict)), You must include valid characters for the stat type. Your invalid characters are as follows: [strip(%0, u(strict_characters))]%b, if(u(fn-is_type, %0), %0 is already a stat type.%b)))=,{&stat_types %vS=[if(t(v(stat_types)), v(stat_types)|%0, %0)]; @pemit %#=Added your stat type "%0".;},{@pemit %#=PARSE ERROR > %qE;};

&cmd-+newstat STSC=$+newstat *=*=*:@switch %2=*=*,{},{@switch setr(E, if(not(u(fn-is_type, %0)), %0 is not a valid stat type.%b, setq(T, u(fn-get_type_name, %0)))[if(not(u(fn-valid_characters, %1, regex)), You must include valid characters for the stat name. Your invalid characters are as follows: [strip(%1, u(regex_characters))]%b)][if(not(u(fn-valid_characters, %2, regex)), You must include valid characters for the stat value. Your invalid characters are as follows: [strip(%2, u(regex_characters))]%b)][if(u(fn-is_stat, %1), %1 is already a stat.%b)])=,{&stat-[setr(C, add(default(%vS/stat_count, 0), 1))] %vS=%qT:%1:%2; &stat_count %vS=%qC; @pemit %#=Added the %qT stat "%1" with a possible value of "%2".;},{@pemit %#=PARSE ERROR > %qE;};}

&cmd-+newstatdetail STSC=$+newstat *=*=*=*:@switch setr(E, if(not(u(fn-is_stat, %0)), %0 is not a valid stat.%b, setq(S, u(fn-get_stat_name, setr(F, u(fn-find_stat, %0)))))[if(not(u(fn-is_type, %1)), %1 is not a valid stat type.%b, setq(T, u(fn-get_type_name, %1)))][if(not(u(fn-valid_characters, %2, regex)), You must include valid characters for the stat name. Your invalid characters are as follows: [strip(%2, u(regex_characters))]%b)][if(not(u(fn-valid_characters, %3, regex)), You must include valid characters for the stat value. Your invalid characters are as follows: [strip(%3, u(regex_characters))]%b)][if(u(fn-is_stat_detail, %qF, %qT, %2), %2 is already a %qT stat for %qS.%b)])=,{&%qF %vS=[if(gt(words(v(%qF), :), 3), v(%qF)~%qT:%2:%3, v(%qF):%qT:%2:%3)]; @pemit %#=Added the %qT stat "%2" with a possible value of "%3" to the stat %qS.;},{@pemit %#=PARSE ERROR > %qE;};


@@ Run these to create your own NWoD DB. Customize at will.

+newtype Attribute
+newtype Skill
+newtype Merit
+newtype Contract
+newtype Pool
+newtype Derangement
+newtype Specialty

+newstat Attribute=Strength=#
+newstat Attribute=Dexterity=#
+newstat Attribute=Stamina=#
+newstat Attribute=Presence=#
+newstat Attribute=Manipulation=#
+newstat Attribute=Composure=#
+newstat Attribute=Intelligence=#
+newstat Attribute=Wits=#
+newstat Attribute=Resolve=#

+newstat Skill=Academics=#
+newstat Skill=Athletics=#
+newstat Skill=Animal Ken=#
+newstat Skill=Computer=#
+newstat Skill=Brawl=#
+newstat Skill=Empathy=#
+newstat Skill=Crafts=#
+newstat Skill=Drive=#
+newstat Skill=Expression=#
+newstat Skill=Investigation=#
+newstat Skill=Firearms=#
+newstat Skill=Intimidation=#
+newstat Skill=Medicine=#
+newstat Skill=Larceny=#
+newstat Skill=Persuasion=#
+newstat Skill=Occult=#
+newstat Skill=Stealth=#
+newstat Skill=Socialize=#
+newstat Skill=Politics=#
+newstat Skill=Survival=#
+newstat Skill=Streetwise=#
+newstat Skill=Science=#
+newstat Skill=Weaponry=#
+newstat Skill=Subterfuge=#

+newstat Academics=Specialty=*=1
+newstat Athletics=Specialty=*=1
+newstat Animal Ken=Specialty=*=1
+newstat Computer=Specialty=*=1
+newstat Brawl=Specialty=*=1
+newstat Empathy=Specialty=*=1
+newstat Crafts=Specialty=*=1
+newstat Drive=Specialty=*=1
+newstat Expression=Specialty=*=1
+newstat Investigation=Specialty=*=1
+newstat Firearms=Specialty=*=1
+newstat Intimidation=Specialty=*=1
+newstat Medicine=Specialty=*=1
+newstat Larceny=Specialty=*=1
+newstat Persuasion=Specialty=*=1
+newstat Occult=Specialty=*=1
+newstat Stealth=Specialty=*=1
+newstat Socialize=Specialty=*=1
+newstat Politics=Specialty=*=1
+newstat Survival=Specialty=*=1
+newstat Streetwise=Specialty=*=1
+newstat Science=Specialty=*=1
+newstat Weaponry=Specialty=*=1
+newstat Subterfuge=Specialty=*=1



}}}