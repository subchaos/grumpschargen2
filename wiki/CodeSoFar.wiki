#summary Current (but not necessarily working) copy of the code.
#labels Featured
=WORK IN PROGRESS=

The following code will change at my whim. May be updated regularly, may not. Comments/suggestions/modifications welcome - send along to woragrump@gmail.com.

{{{
@@ REQUIRED FEATURES - READ THIS FIRST!
@@ -
@@ You are going to need a Function Invocation Level of at least 10,000.
@@ -
@@ This code assumes you've created a stdheader, stdsubheader, and stdfooter for your game.
@@ -
@@ You are assumed to have an isstaff(dbref) function. The SGP Globals come with one.
@@ -
@@ GAME-SPECIFIC DIFFERENCES
@@ -
@@ This section is likely only interesting to coders, and maybe not even those. I apologize in advance for any system bias I am perceived to be displaying. Read on at your own risk.
@@ -
@@ itemize(<list>, <delim>) - equates to elist(<list>, <phrase>, <delim>) on Rhost. Rhost users may need to create a custom itemize function. There should be one included with the SGP Globals, however.
@@ iter() calls which are required to have no spaces have an output delimiter of @@ for MUX compatibility. Rhost users will need to change this to @@().
@@ -
@@ Since there's no ibreak() on MUX, I've used first(iter(blah, if(bleh, bloo|<term>|)), |<term>|). Waste of cycles, but easy to convert - just search for the first |<term>| and stick a [ibreak()] in its place, then remove the 'first(' and the ', |<term>|)'. Note that you will have to do this by hand (or at least look before hitting replace all) because first( is used elsewhere in the code. Or you could just leave it as is - not like nowadays we can't afford the extra cycles.
@@ -
@@ streq() has been replaced with eq(comp(string1, string2), 0) for MUX compatibility.
@@ -





@create Chargen DB Holder <CDH>=10
@set CDH=HALT INHERIT
@force me=&CDH me=num(CDH)

&stafflock CDH=isstaff(%0)
@lock/use CDH=stafflock/1

&fn-getstatdbref CDH=if(t(setr(0, first(iter(lcon(me), if(strmatch(name(itext(0)), %0), itext(0)|<term>|)), |<term>|))), %q0, #-1 COULD NOT GET STAT DBREF FOR %0.)

&fn-getstat CDH=if(t(%2), if(t(setr(0, ulocal(fn-getstatdbref, %2))), u(%q0/fn-getstat, %0, %1), %q0), if(t(setr(0, first(iter(lcon(me), if(t(member(get(itext(0)/valid_stat_names), %1, |)), ulocal(itext(0)/fn-getstat, %0, %1)|<term>|)), |<term>|))), %q0, if(t(words(%q0)), %q0, #-1 COULD NOT FIND STAT %1 for %0. STAT TYPE NOT PROVIDED.)))

&fn-getstatdetail CDH=if(t(%2), if(t(setr(0, ulocal(fn-getstatdbref, %2))), u(%q0/fn-getstatdetail, %0, %1), %q0), if(t(setr(0, first(iter(lcon(me), if(t(member(lattr(itext(0), detail-*), detail-%1)), ulocal(itext(0)/fn-getstatdetail, %0, %1)|<term>|)), |<term>|))), %q0, if(t(words(%q0)), %q0, #-1 COULD NOT FIND STAT DETAIL %1 for %0. STAT TYPE NOT PROVIDED.)))




@create NWoD Races <NR>=10
@set NR=HALT INHERIT
@force me=@parent NR=v(CDH)
@lock/use NR=stafflock/1
@force me=&NR me=num(NR)

&valid_stat_names NR=Race

&valid_stat_values NR=Mortal|Changeling

&detail-attribute_balance NR=5 4 3

&fn-getstatdbref CDH=if(t(setr(0, first(iter(lcon(me), if(strmatch(name(itext(0)), %0), itext(0)|<term>|)), |<term>|))), %q0, #-1 COULD NOT GET RACE OBJECT DBREF FOR %0.)

&fn-getstat NR=default(%0/_race, Mortal)

&fn-getstatdetail NR=if(t(setr(0, ulocal(fn-getstatdbref, %0))), udefault(%q0/detail-%1, udefault(me/detail-%1, #-1 ERROR GETTING RACE-LEVEL DETAIL %1 FOR %0.)), %q0)




@create NWoD Mortal <NM>=10
@set NM=HALT INHERIT
@force me=@parent NM=v(NR)
@lock/use NM=stafflock/1




@create NWoD Changeling <NC>=10
@set NC=HALT INHERIT
@force me=@parent NC=v(NR)
@lock/use NC=stafflock/1

&detail-attribute_balance NC=5 4 3




@create NWoD Attributes <NA>=10
@set NA=HALT INHERIT
@force me=@parent NA=v(CDB)
@lock/use NA=stafflock/1

&valid_stat_names NA=Intelligence|Wits|Resolve|Strength|Dexterity|Stamina|Presence|Manipulation|Composure

&valid_stat_values NA=1|2|3|4|5|6|7|8|9|10

&fn-getstat NA=extract(setr(0, default(%0/_attributes, 1|1|1|1|1|1|1|1|1)), member(%q0, %1, |), 1, |)

&fn-get_valid_values NA=default(me/valid_%0_values, v(valid_stat_values))

&fn-get_cg_cost NA=if(t(setr(0, ulocal(fn-getstat, %0, %1, attribute))), if(eq(%q0, 5), 5, sub(%q0, 1)), 0)

&cgcheck-valid_values NA=iter(v(valid_stat_names), if(!t(member(setr(1, u(fn-get_valid_values)), setr(0, ulocal(fn-getstat, %0, itext(0))), |)), You must enter one of [itemize(%q1, |)] for [itext(0)].%R, if(lte(%q0, 0),The minimum allowable value for [itext(0)] is 1.%R, if(gt(%q0, 5), The maximum allowable value for [itext(0)] at character generation is 5.%R))), |, @@)

&cgcheck-balance NA=if(!eq(comp(setr(0, u(fn-getstatdetail, %0, attribute_balance)), setr(1, sort(ladd(ulocal(fn-get_cg_cost, %0, Strength) [ulocal(fn-get_cg_cost, %0, Dexterity)] [ulocal(fn-get_cg_cost, %0, Stamina)]) [ladd(ulocal(fn-get_cg_cost, %0, Intelligence) [ulocal(fn-get_cg_cost, %0, Wits)] [ulocal(fn-get_cg_cost, %0, Resolve)])] [ladd(ulocal(fn-get_cg_cost, %0, Presence) [ulocal(fn-get_cg_cost, %0, Manipulation)] [ulocal(fn-get_cg_cost, %0, Composure)])], n))), 0), You must spread your points among attributes in three groups of [itemize(%q0)]. You have [itemize(%q1)].%R)

&layout NA=stdsubheader(Attributes)%R %b[space(12)][center(Mental,20)] %b[center(Physical,19)] %b[center(Social,20)]%R %b[rjust(Power:,11)] [ljust(Intelligence:,14)] [rjust(u(fn-getstat,%0,Intelligence),5)] %b[ljust(Strength:,13)] [rjust(u(fn-getstat,%0,Strength),5)] %b[ljust(Presence:,14)] [rjust(u(fn-getstat,%0,Presence),5)]%R %b[rjust(Finesse:,11)] [ljust(Wits:,14)] [rjust(u(fn-getstat,%0,Wits),5)] %b[ljust(Dexterity:,13)] [rjust(u(fn-getstat,%0,Dexterity),5)] %b[ljust(Manipulation:,14)] [rjust(u(fn-getstat,%0,Manipulation),5)]%R %bResistance: [ljust(Resolve:,14)] [rjust(u(fn-getstat,%0,Resolve),5)] %b[ljust(Stamina:,13)] [rjust(u(fn-getstat,%0,Stamina),5)] %b[ljust(Composure:,14)] [rjust(u(fn-getstat,%0,Composure),5)]

@create NWoD Skills <NS>=10
@set NS=HALT INHERIT
@force me=@parent NS=v(CDB)
@lock/use NS=stafflock/1
@force me=&NS me=num(NS)

&valid_stat_names NS=Academics|Athletics|Animal Ken|Computer|Brawl|Empathy|Crafts|Drive|Expression|Investigation|Firearms|Intimidation|Medicine|Larceny|Persuasion|Occult|Stealth|Socialize|Politics|Survival|Streetwise|Science|Weaponry|Subterfuge

&valid_stat_values NS=0|1|2|3|4|5

&fn-getstat NS=extract(setr(0, default(%0/_skills, 0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0)), member(%q0, %1, |), 1, |)

&fn-get_valid_values NS=default(me/valid_%0_values, v(valid_stat_values))

&cgcheck-valid_values NS=iter(v(valid_stat_names), if(!t(member(setr(1, u(fn-get_valid_values)), setr(0, ulocal(fn-getstat, %0, itext(0))), |)), You must enter one of [itemize(%q1, |)] for [itext(0)].%R, if(lte(%q0, 0),The minimum allowable value for [itext(0)] is 1.%R, if(gt(%q0, 5), The maximum allowable value for [itext(0)] at character generation is 5.%R))), |, @@)

&cgcheck-balance NS=[setq(0, ladd(iter(Academics Computer Crafts Investigation Medicine Occult Politics Science, setr(3, ulocal(fn-getstat, %0, itext(0))) [gte(%q3, 5)])))][setq(1, ladd(iter(Athletics Brawl Drive Firearms Larceny Stealth Survival Weaponry, setr(3, ulocal(fn-getstat, %0, itext(0))) [gte(%q3, 5)])))][setq(2, ladd(iter(Animal Ken|Empathy|Expression|Intimidation|Persuasion|Socialize|Streetwise|Subterfuge, setr(3, ulocal(fn-getstat, %0, itext(0))) [gte(%q3, 5)], |)))][if(case(setr(1, revwords(sort(%q0 %q1 %q2, n))), setr(0, u(fn-getstatdetail, %0, skill_balance)), 0, 1), You must spread your points among skills in three groups of [itemize(%q0)]. You have [itemize(%q1)].%R)]

&layout NS=stdsubheader(Skills)%R %b[ljc(center(Mental %(-3 unskilled%),24),24)] %b[ljc(center(Physical %(-1 unskilled%),23),23)] %b[ljust(center(Social %(-1 unskilled%),24),24)][iter(v(valid_stat_names), if(eq(mod(inum(0), 3), 1), %R %b)[ljust(itext(0)[if(hasattr(%0, _specialty-[edit(itext(0), %b, _)]), *)]:, if(!eq(mod(inum(0), 3), 2), 19, 18))][rjust(u(fn-getstat, %0, itext(0)), 5)]%b%b, |, @@)]


@create NWoD Skill Specialties <NSS>=10
@set NSS=HALT INHERIT
@force me=@parent NSS=v(CDB)
@lock/use NSS=stafflock/1
@force me=&vS NSS=v(NS)

&valid_stat_names NSS=iter(get(%vS/valid_stat_names), itext(0) Specialty, |, |)

&valid_stat_characters NSS=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ,.;:'"?/\-_+!@#$^&*()<>

&valid_stat_length NSS=255

@@ Correct to account for multiple specialties in a single skill. May need to change to a multilist.
&fn-getstat NSS=get(%0/_specialty-[edit(%0, %b, _)])

&fn-get_skill_value NSS=u(%vS/fn-getstat, %0, %1)

&fn-get_skill_name NSS=extract(setr(0, get(%vS/valid_stat_names)), match(%q0, %0), 1, |)

&cgcheck-points NSS=if(case(setr(0, u(fn-getstatdetail, %0, num_specialties)), setr(1, words(lattr(%0/_specialty-*))), 0, 1), You must have %q0 specialties. You have %q1.%R)

&cgcheck-skills NSS=iter(lattr(%0/_specialty-*), if(t(ulocal(fn-get_skill_value, %0, setr(0, edit(after(itext(0), -), _, %b)))), You must have at least a 1 in %q0 in order to have a specialty in it.%R),, @@)

@@ 13 char skillname, 2 chars space (: ), 21 chars specialty text, 2 columns (3 spaces between?)
&layout NSS=stdsubheader(Skill Specialties)[iter(lattr(%0/_specialty-*), %R%b [setr(0, ulocal(fn-get_skill_name, edit(after(itext(0), -), _, %b)))]: [wrap(u(fn-getstat, %0, %q0), sub(75, add(strlen(%q0), 2)))], |, @@)]



}}}