#summary Project spec sheet.
#labels specification,Featured,specsheet

=== Goals ===

  * Simple to use
  * Simple to code and read the code of
  * Semi-system-independent (World of Darkness, new and old)
  * Usable on MUX (and possibly Rhost, and maybe even MUSH, though no promises)
  * Reasonably complete

=== Features ===

  * +sheet
  * +prove
  * +spend/+regain
  * +approve/+unapprove
  * xp spends
  * system to list stats
  * templates
    * Type +check <template name> to be checked by the standards of Template X.
    * Template may be locked and require staff to set a flag on you so you can use it.

*Additional features*

  * basic "auto-approve" setting - if on, auto-approval can happen so long as everything checks out
  * specific stat "no-auto-approve" setting - if set, will stop auto-approval if the PC object has that stat set
  * rules for stat combinations that prevent auto-approval

=== Database ===

*Notes*

For my own reference, database fields will be referenced like so:

`object.attribute.fieldnumber.subfieldnumber[.sub-subfieldnumber, etc.]`

Where object is the object the field is stored upon - OR ONE OF ITS PARENTS. (Parent searching allows us to have infinitely large databases.) Attribute is, of course, the attribute name to look for. If no field number is given, the entire attribute is taken. If a field number is given, the attribute will be extracted initially based on a separator of `|`. That subfield may be recursed several times using the following separators:

  * `|`
  * `~`
  * {{{`}}}
  * More will be added as field depth is required.

So, a deep field reference might be:

`PC._stats.0.1`

The actual attribute would look something like this:

{{{&_stats *PC=5~6|4~5`2`3~5|2|3|3|3|2|2|3}}}

The value returned from our example would thus be `6`. While `PC._stats.1.2.1` would return `2`. (Numbering is zero-based.)

*Shorthand*

  * PC stands for Player Character.
  * Self stands for the object the data is stored upon or its parents.
  * Stat stands for the value of the current stat.

*Structure*

Master DB
  * auto-approve (default 1)
  * default sheet sections
  * default stat names
  * default stat values
  * default available stats
  * rules restricting availability of default stats
  Race A (B, C, ...etc) DB
    * rules for determining if PC is race
    * rules for determining whether or not PC can be set to race
    * additional sheet sections
    * different stat names
    * different stat values
    * additional available stats
    * rules restricting availability of racial stats
  Types of points:
|| *Name* || *Multiplier* || *Current Value Storage Location* || *Total Value Storage Location* ||
|| Experience || Stat+1 (or just stat) || `PC._xp.0` || `PC._xp.1` ||
|| Freebies || 1 ||  || `Self.freebies` ||
|| Magic XP || Stat+1 || `PC._mxp.0` || `PC._mxp.1` ||

*Anatomy of a stat*

  * Name
  * Value
  * Explicitly permitted values (optional)
  * Data type
  * Data length
  * PC storage location
  * Info (optional)
  * Base cost
  * Prerequisites to have
  * Prerequisites to raise
  * Whether or not this disables auto-approval