#summary Code specification
#labels Featured,Phase-Design

== SPEC NOTES ==

There are two types of stat in NWoD: simple and compound. A simple stat is a stat which has but one value, whether it's text or numerical. A compound stat is a simple stat - with the ability to attach additional stats to it.

_Simple stats_ are expressed like so: `Stat Type:Stat Name:Value`

_Compound stats_ are expressed like so: `Stat Type:Stat Name:Value:List of simple stats separated by ~tildes`

To properly explain these, we're going to have to dissect the various parts of a stat.

  * _Stat Type_: A stat type is the name of the group of stats (Attribute, Skill, Merit, etc) your chosen stat belongs to. We want to reuse these as much as possible, since they make it easy to group stats and auto-generate a sheet based on what the player's got stored on them. There are certain reserved stat types, all of which are used to help check a player for certain settings which will allow them to get restricted stats: Flag, which may be used to check a player for specific flags; Setting, which will look for an attribute on the player object; and I'm leaving room to add more, though I can't think of any right now.

  * _Stat Name_: Strength, Brawl, etc. However! Some stats have special names. These include names like `"Language (*)`" and "`Status (Police|City|Harpies|whatever)`". We're going to work up a parsing code to allow you to make stat names change depending on value. Note that this only matters during chargen (and advancement) - on the player's sheet (or sheet object), they're going to have `Merit:Language (German):1`. Thus there will be no direct analog for that stat in the stat database - but that's okay, the parser will be able to spot it.

  * _Stat Value_: Value has three options:
    # A number (#) which is between 1 and 10, and may be treated as a pool, with temporary raises and losses. NO NWoD stat may go above 10. Most won't ever exceed 5. However, that's for the code you build off of this character generator to worry about - in the stat DB, numerical stats will be stored as "`#`". That implies that 0/10 is a correct value, as is 6, as is 0, as is 3. If you write code to raise or lower someone's stats according to game rules, make sure you account for the game rules within that code - the chargen will NOT prevent them from raising or rolling a stat at 10.
    # A word or phrase (`*`) which may have any of the following characters: `A-Z`, `0-9`, `!`, `@`, `$`, `^`, ```, `'`, `"`, `,`, `.`, `?`, `space`, and `_`. There are some characters missing. The reason for this? We are going to use them as separators, _or_ they are capable of causing the chargen's sheet to barf. The separator characters are `:`, `|`, and `~`. The characters used to parse stat names and values are `*`, `#`, `(`, `)`, `<`, `>`, `+`, `-`, `=`, `&`, and `|`. The characters which may cause the chargen to barf are `%`, `\`, `{`, `}`, `[`, `]`, `/`, and `;`. Everything else is whitelisted. If you want to add to that list of permissible characters, there's a setting for it - but think very carefully before you do and make sure that the character in question won't cause your game harm. (European characters should be all right - I just can't be arsed to add them myself and they might not work on some games, so I'm leaving them out for now.)
    # A list of permissible text values, such as "`Daeva|Gangrel|Mekhet|Nosferatu|Ventrue`". You could stick a `#` or a `*` in there, though I'm not sure why you'd need to. You cannot, however, make a list like so: `Peter|Piper|Picked|A|Peck|Of|Pickled|Peppers (Or|Maybe|Something|Else|From|This|List)|And|So|On`. The internal pipes would get confused, sorry. Since I can't think of a use for that trick, I'm not going to code a way around it.

And finally, that list of simple stats separated by tildes (`~`): these are formatted EXACTLY the way regular simple stats are. They use the same parser and everything. They're separated by tilde and kept in the fourth slot ALWAYS so that you can use the same functions to parse them.

Each stat is stored on its own attribute. Attribute name doesn't matter except that it begins with `_stat-`. Do NOT let your players add attributes that start with `_stat-`! They will be able to roll and prove them. Fortunately, attributes starting with `_` are wizard-only on most games. That is assumed to be true here. If this assumption is incorrect, better edit your .conf file to protect those attributes, or there will be problems when players find that they can set their abilities to insane levels without spending XP.

We WILL have a standardized validation format to compare stats. This is going to be the trickiest part of all. We will need it for merits, and to determine whether a person has the correct race/group to have stat X. Right now, it is as follows:

=== `CompareValue ComparisonOperator CompareValue` ===

  * `CompareValue` may be expressed in the following ways:

  `Stat Type:Stat Name` - yes, you must use the fully qualified stat name for the stat you want. If you want it to apply to all Languages, you would use `Merit:Language (*)` - whereas if you want it to apply only to Language (German) you would need to express it as `Merit:Language (German)`. It gets complicated, I know, having to repeat the entire thing, so I'll hopefully be including some shortcuts when I code the stat-adding portion of the CG.

  A number, any number.

  A piece of text, any valid piece of text using the rules above.

  `Flag:<flag>` - one word, no spaces. If you want to set special permissions on your players, this is one way to do it. For example, Flag:Blind would require that the player object has the BLIND flag in order to operate it. Not the greatest example, but presumably you have special your-game-only flags if you want to use this.

  `Setting:<&attribute>` - one word, no spaces. It's strongly recommended that you make the expected setting a wiz-only setting by starting it with a `_`. For example, you could check that the player has a setting of `_TEMPLATE` with the value "`Feature Character`" if you wanted. Staff would, of course, have to set the `_TEMPLATE` attribute on the player themselves, but you can easily make certain merits or stats check for it.

  * `ComparisonOperator` is one of the following: >, <, =

  You can group these expressions and then join them as in the standard programming language expressions. To group, use parentheses. Joining operators are | (OR) and & (AND). So you might end up with expressions like:

  `Merit:Stunning Looks > 2 & Skill:Persuasion > 3`

  `(Attribute:Strength > 2 & Skill:Brawl > 2) | Attribute:Dexterity > 3`

  `Personal:Group = Police`

  `Setting:_TEMPLATE = Feature Character`

== CG POINTS ==

CG points apply to numerical stats only. If a stat does not have a point value, it is assumed to have a point max of 0, and thus be un-buyable at chargen.

Points, in White Wolf games, come in several types.

  * Grouped points: You get X, Y, and Z points to spread among groups A, B, and C
  * Single-type points: You get X virtues, Y backgrounds, and Z merits
  * Single-stat points: You get X points for willpower, Y points for arete, etc.
  * Calculated stats: Stat X = Stat Y + Stat Z, Stat X = Least of Stat Y or Stat Z
  * Values that spend their points from alternate pools: Freebies, merits, etc.

Each of these types must be handled differently.

*Grouped Points*: These are a pain in the ass. Fortunately, there seem to be only two: Attributes and Abilities/Skills. Since there are only two, we'll include a few default checks that handle the two types of stats they apply to. We'll allow staff to change which skill/ability/attribute goes into which group, but we'll calculate the point totals of the groups in the same way every time. I expect we'll need something like the following command:

`+cg/group Attributes1=Strength|Dexterity|Stamina`

`+cg/group Attributes2=Presence|Manipulation|Composure`

`+cg/points Attribute=7 5 3`

...etc.

We _will_ call these groups "Attributes1", "Attributes2", "Attributes3", "Skills1", "Skills2", and "Skills3". I know there are fancier names for these groups in the various WoD setups; these are keywords for my chargen only to make it as cross-compatible as possible. We're going with "Skills" instead of "Abilities" because in theory more people will want this for NWoD than old as there are actually new _books_ for NWoD. (Also, "Skills" is shorter.) This does NOT affect the sheet or anything like it - it's just how things will be grouped for the code's purposes. We're allowing plurals in this one instance because they make sense. This is a bit of a nasty hardcode hack, but since there are only two places it needs done, it beats the alternative: coding an entire grouping system for two sets of stats. Ugh.

*Single Type Points*: Stats are already automatically grouped by type. It should be simple enough to type, say, `+cg/points Virtue=7` and make sure everyone has access to 7 points of virtues. It enforces a maximum - someone could still spend 2 of the seven points they have for virtues, and discard the rest. To enforce a minimum, `+cg/min Virtue=1` would be a good start. Then, if you don't want someone to pay points for the first point, `+cg/default Virtue=1` would make that first point free.

*Single Stat Points*: `+cg/points Morality=7` - not much fancy here. This does NOT take into account calculated stats - if Humanity in your game is a calculated stat, look elsewhere.

*Calculated Stats*: Special language is needed to describe calculated stats. First, you create the stat:

`+cg/new Basic:Size=5`
`+cg/new Pool:Speed=#`

Then, you set the formula for the stat:

`+cg/formula Speed=Basic:Size + Attribute:Strength + Attribute:Dexterity + Merit:Fleet of Foot + Kith:Runnerswift:2`

Stats that don't produce a numerical value evaluate to 1 or 0, or to whatever the third value is, if there is one. The third value *must* evaluate to a number, though.

The third value can also be a stat, say: `Pool:Wyrd`.

It can even be a formula: `Greatest:Attribute:Strength|Attribute:Dexterity|Attribute:Stamina`

There are two special types of formula: Greatest and Least. They'll take a pipe-separated list of stats and translate them into numbers, then take the highest of those numbers, or the lowest. This should give you a hint for, say, Defense:

`+cg/new Pool:Defense=#`

`+cg/formula Defense=Least:Attribute:Wits|Attribute:Dexterity`

If, for some reason, you allow players to buy a calculated stat up, the _minimum_ value of that stat will be the calculated result, the maximum will be whatever you set (or the default of 10), and the total value will be the purchased points plus the calculated value.

*Points drawn from other pools*: This gets _speshul_. And irritating. When you can buy your Blood Potency up with 3 Merit points, figuring out how many points the user has spent is irksome. We'll deal with that by creating point pools and setting the cost of buying certain stats in them. So:

`+cg/pool Merit`

`+cg/cost Merit/Blood Potency=3`

`+cg/pool XP`

`+cg/cost XP/Attribute=CurrentValue * 5`

Or, for you OWoD fans:

`+cg/cost XP/Ability=NewValue * 2`

`+cg/initialcost XP/Ability=3`

Costs are considered to apply across all tiers. CG points are always 1:1.

== COMMAND SPEC ==

*Goal*: Keep the list of commands simple and easy to remember. Multiple, easy to remember commands are preferred over single, overly complex commands.

*Goal*: Don't step on any default commands like +set. Let's try to keep them prefixed with +cg and +xp.

*Goal*: Follow the model set forth in GCG v1 - advanced players can set things to whatever they want, without being pestered with errors. Staff can, if they choose, manually approve these characters.

*Goal*: Have a small suite of staff-only commands to override default chargen behavior.

== NEW PLAYER COMMANDS ==

`+cg/help` (also `+cghelp`) - Quick reference of chargen commands. *Coded.*

`+cg` - Suggest what you need to do next, plus list a few vital commands.

`+cg <Stat Name or Type>` - Check whether or not you meet a stat's prerequisites, if any. *Coded (equivalent to `+ref <Stat Name or Type>`)*

`+cg <Stat Name>/<Detail>` - Check whether or not you meet a stat detail's prerequisites, if any. *Coded (equivalent to `+ref <Stat Name>/<Detail>`)*

`+cg <Stat Name>=<Value>`
  * +cg Brawl=5
  * +cg Language (German)=1
  * +cg Hollow (Personal)=5

`+cg <Stat Name>/<Detail>=<Value>`
  * +cg Hollow/Wards=2
  * +cg Brawl/Specialty=Right Hook
  * +cg Humanity/Megalomania=5

`+cg Template=<Template>` - Special version. Applies a template. Will ask if you're sure first.

`+cg Tier=<Tier>` - Special version. Checks your points based on a different tier than the one you're listed in by default.

`+cg/check` - Check you for everything that needs to be set before you can be approved.

`+cg/complete` - Runs all checks and, if you pass, performs the "chargen complete" action.

`+cg/wipe` - Wipe your stats. Will ask if you're sure first.

`+cg/template` - Lists all templates.

`+cg/template <Template>` - Show a template.

== ALL PLAYER COMMANDS ==

`+sheet` - View your sheet.

`+ref` - List all types of stats, plus handy stat database help info. *Coded.*

`+ref <Stat Type>` - List all stats in that type, plus any checks that will be run by type. *Coded.*

`+ref <Stat Name>` - List all details in that stat, plus formats available, plus values available, plus any checks that will be run on this stat. *Coded.*

`+ref <Stat Name>/<Detail>` - List all details on this detail, plus formats available, plus values available, plus any checks that will be run on this stat. *Coded.*

`+xp` - List how much XP you have, plus handy spending commands (if in XP-spending-safe area).

`+xp/check <Stat Name>` - Lists how much it would cost to buy the next level of that stat, and whether you meet the prerequisites.

`+xp/check <Stat Name>/<Detail>` - As above, but for sub-stats.

`+xp/buy <Stat Name>` - Spend XP on a stat.

`+xp/buy <Stat Name>/<Detail>` - As above, but for sub-stats.

== STAFF COMMANDS ==

`+cg/staffhelp` (also `+cgstaffhelp`) - Quick reference of staff chargen commands.

`+sheet <Player>`

`+cg/approve <Player>` (also `+approve`)

`+cg/unapprove <Player>` (also `+unapprove`)

`+cg/new <Stat Type>` *Coded.*

`+cg/new <Stat Type>:<Stat Name>=<Value>` *Coded.*

`+cg/new <Stat Name>/<Stat Type>:<Detail>=<Value>` *Coded.*

`+cg/group [Attributes1, Attributes2, Attributes3, Skills1, Skills2, or Skills3]=<List of stat names>` - Manage the six default point groups. *Coded.*

`+cg/tier <New or Old Tier Name>=<Restrictions>` - Tiers are point groups.

`+cg/tier <Tier Name>/<Stat Type or Name>=<Points>`

`+cg/tier/nuke <Tier Name>`

`+cg/template <New Template Name>=<Tier Name>` - Templates are predefined stats.

`+cg/template <Template Name>/<Stat Name>=<Value>`

`+cg/template/nuke <Template Name>`

`+cg/restrict <Stat Name>=<Restrictions>` (Does not compound)

`+cg/unrestrict <Stat Name>`

`+cg/restrict <Stat Name>/<Detail>=<Restrictions>`

`+cg/unrestrict <Stat Name>/<Detail>`

`+cg/min <Stat Type>=<Value>`

`+cg/min <Stat Name>=<Value>`

`+cg/max <Stat Type>=<Value>`

`+cg/max <Stat Name>=<Value>`

`+cg/default <Stat Type>=<Value>` - the default will not be charged CG Points for.

`+cg/default <Stat Name>=<Value>`

`+cg/points <Stat Type>=<Value>` - number of points players have to spend on that type by default.

`+cg/points <Stat Name>=<Value>`

`+cg/note <Stat Name>=[<Notes>]` (enter nothing to remove)

`+cg/note <Stat Name>/<Detail>=[<Notes>]` (enter nothing to remove)

`+cg/nuke <Stat Type>`

`+cg/nuke <Stat Type>:<Stat Name>`

`+cg/nuke <Stat Name>/<Detail Type>:<Detail>`

The following functions may not be coded, since they would require, in theory, that we parse the playerbase and edit their stats. We're including them here as a possible stage 2 feature.

`+cg/name <Stat Type>=<New Type Name>`

`+cg/name <Stat Name>=<New Stat Name>`

`+cg/name <Stat Name>/<Detail>=<New Detail Name>`

`+cg/type <Stat Name>=<New Stat Type>`

`+cg/type <Stat Name>/<Detail>=<New Detail Type>`

`+cg/value <Stat Name>=<New Value>`

`+cg/value <Stat Name>/<Detail>=<New Detail Value>`

== Reserved Words ==

  * Greatest
  * Least
  * Tier
  * Template
  * Setting
  * Flag
  * CurrentValue
  * NewValue
  * Attributes1
  * Attributes2
  * Attributes3
  * Skills1
  * Skills2
  * Skills3