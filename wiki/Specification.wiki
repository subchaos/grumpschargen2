#summary Code specification
#labels Featured,Phase-Design

== Summary ==

The stat database is an extremely specialized miniature relational database. It's a pain in the ass to describe in standard database terms (and most of the people reading this wouldn't be interested anyway) so I'm going to group them and then take each group in detail.

These are the groups of data stored in this thing:

  * Stats
  * Points
  * Templates

== STATS ==

*Player Commands*
{{{
+cg <Stat>=<Value>
+ref <Stat>
+cg/check
+cg/check <Stat>
+cg/wipe
+cg/wipe <Stat>
}}}

Every stat has the following parts:

  * Type
  * Name
  * Value
  * Details

Each stat is stored like so:

Stat Database: `&stat-# SDB=Type:Name:Value:Details`

Player Object: `&_stat-# PC=Type:Name:Value:Details`

=== Types ===

*Staff Commands*
{{{
+cg/new <Type>
+cg/nuke <Type>
+cg/type <Stat>=<New Type>*
}}}
`*` May not be implemented since it requires changing every PC object on the grid.

*Sample Types*
  * Attribute
  * Merit
  * Discipline

Types are stored by name in the attribute `&stat_types` on the stat database and are referenced by name (rather than by number) on the PC and stat databases for ease of lookup.

There are several "reserved" pseudo-types which act as keywords to tell the system to treat the data which follows differently. For the most part, you shouldn't have to worry about these; if you try to create a type which happens to have a reserved name, you'll be prevented from doing so. See [#Reserved_Words] for a list.

=== Name ===

*Staff Commands*
{{{
+cg/new <Type>:<Name>=<Value>
+cg/nuke <Type>:<Name>
+cg/name <Stat>=<New Name>*
}}}
`*` May not be implemented since it requires changing every PC object on the grid.

Stat names may have the following special formats:

  * Literals: `Name`
    * Brawl
    * Melee
    * Strength
  * Wildcards: `Name (*)`
    * Language (Sign Language)
    * Hollow (Motley)
    * Hollow (Personal)
  * Lists: `Name (Option A|Option B|Option C)`
    * Status (Police)
    * Status (Fire Department)
    * Status (Vampire)

Names are stored on the stat database as the list, wildcard, or literal, as in `Language (*)`; on the player, they are stored as the actual, player-visible name: `Language (German)`.

=== Values ===

*Staff Commands*
{{{
+cg/new <Type>:<Name>=<Value>
+cg/default <Stat>=<Value>
+cg/value <Stat>=<New Value>*
}}}
`*` May not be implemented since it requires checking and possibly changing every PC object on the grid.

Stat values may have the following special formats:

  * Numerals between 0 and 10: `#`
  * Wildcards: `*`
    * Full name: Sammy the Snake
    * Occupation: Peanut butter maker
  * List of valid options: `Option A|Option B|Option C|etc...`
    * Gender: Male, Female, or Transvestite
    * Race: Mortal, Vampire, Changeling, Werewolf or Mage
  * [#Formulas]
    * Speed: `Basic:Size + Attribute:Strength + Attribute:Dexterity + Merit:Fleet of Foot + Kith:Runnerswift:2`


All numerical stats may have a temporary value and a permanent value. These are stored on the PC as Temp/Perm. For example: `&_stat-# PC=Attribute:Strength:1/5`

Non-numerical stat values may not be rolled.

Non-numerical stats are restricted in what characters they may contain. For details, see [#Restricted_Characters] and [#Reserved_Characters]. A good rule of thumb is that restricted characters may not be used in a stat value or name at all, ever, while reserved characters may be used in names and values by staff.

[#Formulas] will be dealt with in more detail later.

=== Details ===

*Commands*
{{{
+cg/note <Stat>=<Details>*
}}}
`*` When used by a staffer, this command sets the details of the stat in the database. When used by a player, it sets a note on the stat in case the player wants to justify it in some way. All stats can have details.

Sample Details:
  * On a PC's Strength: Set to 5 because my character is a world-class bodybuilder.
  * On the Stat DB: Strength is the stat which tells you how strong your character is.%R%R%T0: Completely unable to move.%R%T1: 90-pound weakling.%R%T2: Average human being.%R%T3: Athlete.%R%T4: Champion wrestler.%R%T5: World-class Olympic bodybuilder.%R%T6: Superhuman.%R%T7: Werewolf.%R%T8: Ungodly.%R%T9: Impossible.%R%T10: Godlike.

Details can contain nearly anything and can be as long as a single attribute will hold. (For Rhost, that's about 3900 characters, give or take; for MUX it's 7900.)

== POINTS ==

Points consist of the following parts:

  * Tier
  * Type
  * Target
  * Value

=== Tiers ===

*Player Commands*
{{{
+ref <Tier>
+cg Tier=<Tier>
+cg/check <Tier>
}}}

*Staff Commands*
{{{
+cg/tier <New Tier>
+cg/tier/nuke <Tier>
}}}

*Sample Tiers*
  * Default
  * Mortal
  * Vampire
  * Feature Character
  * Greenhorn

A tier is a group of points.

You must have a Default tier.

We will attempt to guess the point tier a player is going for, but if we can't, or we guess wrong, the player can set it explicitly.

All rules and restrictions are associated with a tier. These commands allow you to permit one tier to have access to a stat or to higher levels of a stat, while another does not.

*Staff Commands*
{{{
+cg/min <Tier>/<Stat>=<Value>*
+cg/max <Tier>/<Stat>=<Value>
+cg/restrict <Tier>/<Stat>=<Value>**
}}}
`*` Note that `<Stat>` in these cases and many others, refers to either a stat name or a type of stat. This way you can apply blanket values to all stats of a type.
`**` Enter nothing to clear a restriction.


= OLD DATA BELOW THIS LINE =
----



We WILL have a standardized validation format to compare stats. This is going to be the trickiest part of all. We will need it for merits, and to determine whether a person has the correct race/group to have stat X. Right now, it is as follows:

=== `CompareValue ComparisonOperator CompareValue` ===

  * `CompareValue` may be expressed in the following ways:

  `Stat Type:Stat Name` - yes, you must use the fully qualified stat name for the stat you want. If you want it to apply to all Languages, you would use `Merit:Language (*)` - whereas if you want it to apply only to Language (German) you would need to express it as `Merit:Language (German)`. It gets complicated, I know, having to repeat the entire thing, so I'll hopefully be including some shortcuts when I code the stat-adding portion of the CG.

  A number, any number.

  A piece of text, any valid piece of text using the rules above.

  `Flag:<flag>` - one word, no spaces. If you want to set special permissions on your players, this is one way to do it. For example, Flag:Blind would require that the player object has the BLIND flag in order to operate it. Not the greatest example, but presumably you have special your-game-only flags if you want to use this.

  `Setting:<&attribute>` - one word, no spaces. It's strongly recommended that you make the expected setting a wiz-only setting by starting it with a `_`. For example, you could check that the player has a setting of `_TEMPLATE` with the value "`Feature Character`" if you wanted. Staff would, of course, have to set the `_TEMPLATE` attribute on the player themselves, but you can easily make certain merits or stats check for it.

  * `ComparisonOperator` is one of the following: >, <, =

  You can group these expressions and then join them as in the standard programming language expressions. To group, use parentheses. Joining operators are | (OR) and & (AND). So you might end up with expressions like:

  `Merit:Stunning Looks > 2 & Skill:Persuasion > 3`

  `(Attribute:Strength > 2 & Skill:Brawl > 2) | Attribute:Dexterity > 3`

  `Personal:Group = Police`

  `Setting:_SPECIALCHARACTER = 1`

== POINTS ==

Points come in groups called tiers. A tier covers all the points for all the stats available to the individual for whatever tier they're set to use. A tier can be restricted - you must be a vampire to have X tier, for example.

There is a Default tier which MUST be set up in order for this chargen to work.

A tier may have multiple point values set for it. It is assumed to use the values set in the Default tier unless they're overridden. A value of 0 (the default) means the player does not have access to that stat or stat type. You can override a default value with 0 if you want a player to have no access to the default.

Points apply to numerical stats only. If a stat does not have a point value anywhere, even in the default tier, it is assumed to have a point max of 0, and thus be un-buyable at chargen.

Tiers might (for example) consist of:

  * Default (everyone has these base points at chargen)
  * Mortal (slightly lower points for mortals)
  * Vampire (slightly higher points for vampires)
  * etc.

Syntax will be something like:

`+cg/tier Default` - Create a new tier

`+cg/points Default/Merit=7`

`+cg/points Default/Humanity=2`

*Note*: tiers are distinct from templates, which are predefined groups of points which may not fit within the tier the PC has selected and thus might cause errors.

*Goal*: Do NOT force players to choose a tier explicitly unless they're doing something _special_. Try to guess what tier they're going for and grade them accordingly.

Points, in White Wolf games, come in several types.

  * Grouped points: You get X, Y, and Z points to spread among groups A, B, and C
  * Single-type points: You get X virtues, Y backgrounds, and Z merits
  * Single-stat points: You get X points for humanity, etc.
  * Calculated stats: Stat X = Stat Y + Stat Z, Stat X = Least of Stat Y or Stat Z
  * Values that spend their points from alternate pools: Freebies, merit points, XP, etc.


Each of these types must be handled differently.

*Grouped Points*: These are a pain in the ass. Fortunately, there seem to be only two: Attributes and Abilities/Skills. Since there are only two, we'll include a few default checks that handle the two types of stats they apply to. We'll allow staff to change which skill/ability/attribute goes into which group, but we'll calculate the point totals of the groups in the same way every time. I expect we'll need something like the following command:

`+cg/group Attributes1=Strength|Dexterity|Stamina`

`+cg/group Attributes2=Presence|Manipulation|Composure`

`+cg/tier Default`

`+cg/points Default/Attribute=7 5 3`

*THIS IS NO LONGER ACCURATE.* I've made some changes in the code and don't have time to set them up here. Will get to it later.

...etc.

We _will_ call these groups "Attributes1", "Attributes2", "Attributes3", "Skills1", "Skills2", and "Skills3". I know there are fancier names for these groups in the various WoD setups; these are keywords for my chargen only to make it as cross-compatible as possible. We're going with "Skills" instead of "Abilities" because in theory more people will want this for NWoD than old as there are actually new _books_ for NWoD. (Also, "Skills" is shorter.) This does NOT affect the sheet or anything like it - it's just how things will be grouped for the code's purposes. We're allowing plurals in this one instance because they make sense. This is a bit of a nasty hardcode hack, but since there are only two places it needs done, it beats the alternative: coding an entire grouping system for two sets of stats. Ugh.

*Single Type Points*: Stats are already automatically grouped by type. It should be simple enough to type, say, `+cg/points Virtue=7` and make sure everyone has access to 7 points of virtues. It enforces a maximum - someone could still spend 2 of the seven points they have for virtues, and discard the rest. To enforce a minimum, `+cg/min Virtue=1` would be a good start. Then, if you don't want someone to pay points for the first point, `+cg/default Virtue=1` would make that first point free.

*Single Stat Points*: `+cg/points Morality=7` - not much fancy here. This does NOT take into account calculated stats - if Humanity in your game is a calculated stat, look elsewhere.

*Calculated Stats*: Special language is needed to describe calculated stats. First, you create the stat:

`+cg/new Basic:Size=5`
`+cg/new Pool:Speed=#`

Then, you set the formula for the stat:

`+cg/formula Speed=Basic:Size + Attribute:Strength + Attribute:Dexterity + Merit:Fleet of Foot + Kith:Runnerswift:2`

Stats that don't produce a numerical value evaluate to 1 or 0, or to whatever the third value is, if there is one. The third value *must* evaluate to a number, though.

The third value can also be a stat, say: `Pool:Wyrd`.

It can even be a formula: `Greatest:Attribute:Strength|Attribute:Dexterity|Attribute:Stamina`

There are two special types of formula: Greatest and Least. They'll take a pipe-separated list of stats and translate them into numbers, then take the highest of those numbers, or the lowest. This should give you a hint for, say, Defense:

`+cg/new Pool:Defense=#`

`+cg/formula Defense=Least:Attribute:Wits|Attribute:Dexterity`

If, for some reason, you allow players to buy a calculated stat up, the _minimum_ value of that stat will be the calculated result, the maximum will be whatever you set (or the default of 10), and the total value will be the purchased points plus the calculated value.

*Points drawn from other pools*: This gets _speshul_. And irritating. When you can buy your Blood Potency up with 3 Merit points, figuring out how many points the user has spent is irksome. We'll deal with that by allowing costs to specify alternate pools, and by creating two default pools, XP and Freebies:

`+cg/cost Blood Potency=Points:Merit:3`

`+cg/cost XP/Blood Potency=CurrentValue * 5`

Or, for you OWoD fans:

`+cg/cost XP/Ability=NewValue * 2`

`+cg/initialcost XP/Ability=3`

Costs are considered to apply across all tiers. CG points are always 1:1.

To start drawing points from another point pool (freebies, XP) you need to finish with one pool, cement your points, spent or unspent. Going back will be a pain in the ass. I'll have to figure out a syntax for this.

One more for the road, and this is one of those absolutely annoying features of White Wolf Games: Substats. Let's see here.

`+cg/new Merit:Hollow (*)=#`

`+cg/type Hollow`

`+cg/new Hollow:Wards=#`

`+cg/new Hollow:Amenities=#`

`+cg/new Hollow:Doors=#`

`+cg/points Default/Hollow=Merit:Hollow` - set the number of points used for the Hollow group of stats to the number of points the player currently has in Hollow.

`+cg/max Default/Hollow=Merit:Hollow` - Don't let them go any higher than their current rating.

There. Substats. That was nowhere near as disgusting as I thought it was going to be.

== COMMAND SPEC ==

*Goal*: Keep the list of commands simple and easy to remember. Multiple, easy to remember commands are preferred over single, overly complex commands.

*Goal*: Don't step on any default commands like +set. Let's try to keep them prefixed with +cg and +xp.

*Goal*: Follow the model set forth in GCG v1 - advanced players can set things to whatever they want, without being pestered with errors. Staff can, if they choose, manually approve these characters.

*Goal*: Have a small suite of staff-only commands to override default chargen behavior.

== NEW PLAYER COMMANDS ==

`+cg/help` (also `+cghelp`) - Quick reference of chargen commands. *Coded.*

`+cg` - Suggest what you need to do next, plus list a few vital commands.

`+cg <Stat Name or Type>` - Check whether or not you meet a stat's prerequisites, if any. *Coded (equivalent to `+ref <Stat Name or Type>`)*

`+cg <Stat Name>=<Value>`
  * +cg Brawl=5
  * +cg Language (German)=1
  * +cg Hollow (Personal)=5

`+cg Template=<Template>` - Special version. Applies a template. Will ask if you're sure first. (Template here means "group of pre-defined points which can be applied to your sheet.")

`+cg Tier=<Tier>` - Special version. Checks your points based on a different tier than the one you're listed in by default. (Tier means "point group".)

`+cg/check` - Check you for everything that needs to be set before you can be approved.

`+cg/complete` - Runs all checks and, if you pass, performs the "chargen complete" action.

`+cg/wipe` - Wipe your stats. Will ask if you're sure first.

`+cg/template` - Lists all templates.

`+cg/template <Template>` - Show a template.

== ALL PLAYER COMMANDS ==

`+sheet` - View your sheet.

`+ref` - List all types of stats, plus handy stat database help info. *Coded.*

`+ref <Stat Type>` - List all stats in that type, plus any checks that will be run by type. *Coded.*

`+ref <Stat Name>` - List all details in that stat, plus formats available, plus values available, plus any checks that will be run on this stat. *Coded.*

`+xp` - List how much XP you have, plus handy spending commands (if in XP-spending-safe area).

`+xp/check <Stat Name>` - Lists how much it would cost to buy the next level of that stat, and whether you meet the prerequisites.

`+xp/buy <Stat Name>` - Spend XP on a stat.

== STAFF COMMANDS ==

`+cg/staffhelp` (also `+cgstaffhelp`) - Quick reference of staff chargen commands.

`+sheet <Player>`

`+cg/approve <Player>` (also `+approve`)

`+cg/unapprove <Player>` (also `+unapprove`)

`+cg/new <Stat Type>` *Coded.*

`+cg/new <Stat Type>:<Stat Name>=<Value>` *Coded.*

`+cg/group [Attributes1, Attributes2, Attributes3, Skills1, Skills2, or Skills3]=<List of stat names>` - Manage the six default point groups. *Coded.*

`+cg/tier <Tier Name>` - Tiers are groups of points available to players.

`+cg/tier/nuke <Tier Name>`

`+cg/template <New Template Name>` - Templates are predefined stats.

`+cg/template <Template Name>/<Stat Name>=<Value>` - Set the stats a template sets.

`+cg/template/nuke <Template Name>`

`+cg/restrict <Stat Name, Stat Type, or Tier>=<Restrictions>` (Does not compound)

`+cg/unrestrict <Stat Name, Stat Type, or Tier>`

`+cg/points <Tier Name>/<Stat Type or Name, or pool name>=<Points>`

`+cg/min <Tier Name>/<Stat Type or Name>=<Value>`

`+cg/max <Tier Name>/<Stat Type or Name>=<Value>`

`+cg/default <Tier Name>/<Stat Type or Name>=<Value>` - the default will not be charged CG Points for.

`+cg/formula <Stat Name>=<Formula>`

`+cg/cost [<Pool Name>/]<Stat Type or Name>=<Formula>`

`+cg/initialcost [<Pool Name>/]<Stat Type or Name>=<Formula>`

`+cg/note <Stat Name>=[<Notes>]` (enter nothing to remove)

`+cg/nuke <Stat Type>`

`+cg/nuke <Stat Type>:<Stat Name>`

The following functions may not be coded, since they would require, in theory, that we parse the playerbase and edit their stats. We're including them here as a possible stage 2 feature.

`+cg/name <Stat Type or Name>=<New Stat Type Name or Stat Name>`

`+cg/type <Stat Name>=<New Stat Type>`

`+cg/value <Stat Name>=<New Value>`

== Reserved Words ==

  * Tier
  * Template
  * Setting
  * Flag
  * Greatest
  * Least
  * CurrentValue
  * NewValue
  * Points
  * Default
  * Attributes1
  * Attributes2
  * Attributes3
  * Skills1
  * Skills2
  * Skills3


== Reserved Characters ==

These characters will be interpreted specially by the chargen. If they are included in a player's input, they might result in weird things.

Note that this is actually done in the code with a _whitelist_. Whitelisted characters are permitted. Anything not on the list is denied.

  * `*` - Wildcard any text
  * `#` - Wildcard any number between 0 and 10
  * `(` and `)` - Group an expression
  * `+` - Add
  * `-` - Subtract
  * `>` - Greater Than
  * `<` - Less Than
  * `=` - Equal To, also a separator in commands
  * `/` - Separator in commands
  * `~` - Database separator
  * `:` - Database separator, also a separator in commands
  * `|` - Or, also a database separator, also a separator in commands
  * `&` - And

== Restricted Characters ==

These letters will be interpreted, in some cases, by MU*code. They should be restricted to prevent code injection.

Note that this is actually done in the code with a _whitelist_. Whitelisted characters are permitted. Anything not on the list is denied.

  * `%` - Escape character.
  * `\` - Escape character.
  * `{` and `}` - MUCode group characters.
  * `[` and `]` - MUCode group characters, forces evaluation of text within them.
  * `;` - Terminates a command.